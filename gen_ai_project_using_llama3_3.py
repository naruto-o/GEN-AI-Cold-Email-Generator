# -*- coding: utf-8 -*-
"""Gen AI Project Using Llama3.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DwW0s-KfhruEzR6ilnvLuLYJK34kiViT
"""

# comments api key is  

pip install langchain

pip install langchain-groq

pip install chromadb

from langchain_groq import ChatGroq

llm = ChatGroq(
    temperature=0,
    groq_api_key=" ",
    model_name="llama-3.3-70b-versatile",
)
response = llm.invoke("the first person to land on moon was")
print(response.content)

!pip install langchain-community

from langchain_community.document_loaders import WebBaseLoader
loader = WebBaseLoader("https://jobs.nike.com/job/R-44232?from=job%20search%20funnel")
page_data = loader.load().pop().page_content
print(page_data)

from langchain_core.prompts import PromptTemplate

prompt_extract = PromptTemplate.from_template(
    """
    ### SCRAPED TEXT FROM WEBSITE:
    {page_data}
    ### INSTRUCTION:
    the scraped text is from a careers page website.
    your job is to extract the job postings and return them in json format containing
    following keys : 'role','experience','skills'and 'description'.
    Only return the valid JSON.
    ### valid json(NO PREAMBLE):
    """
)
chain_extract = prompt_extract | llm
res = chain_extract.invoke(input={'page_data': page_data})
print(res.content)

from langchain_core.output_parsers import JsonOutputParser
json_response = JsonOutputParser().parse(res.content)
json_response
type(json_response)

import pandas as pd
df = pd.read_csv("/content/my_portfolio.csv")
df

import uuid
import chromadb

client = chromadb.PersistentClient('vectorstore')
collection = client.get_or_create_collection(name="portfolio")

if not collection.count():
  for _,row in df.iterrows():
    Collection.add(documents =row["Techstack"],
                   metadatas={"links": row["Links"]},
                   ids=[str(uuid.uuid4())])

links = collection.query(query_texts=job['skills'],n_results=2).get('metadatas',[])
links

job = json_response
job['skills']

prompt_email = PromptTemplate.from_template(
        """
        ### JOB DESCRIPTION:
        {job_description}

        ### INSTRUCTION:
        You are Shikhar Sharma, a Software development executive at Shikhar Enterprises. Shikhar Enterprises is an AI & Software Consulting company dedicated to facilitating
        the seamless integration of business processes through automated tools.
        Over our experience, we have empowered numerous enterprises with tailored solutions, fostering scalability,
        process optimization, cost reduction, and heightened overall efficiency.
        Your job is to write a cold email to the client regarding the job mentioned above describing the capability of Shikhar Enterprises
        in fulfilling their needs.
        Also add the most relevant ones from the following links to showcase Shikhar Enterprises's portfolio: {link_list}
        Remember you are Shikhar, SDE at Shikhar Enterprises.
        Do not provide a preamble.
        ### EMAIL (NO PREAMBLE):

        """
        )
chain_email = prompt_email | llm
res = chain_email.invoke(input={'job_description': str(job), 'link_list': links})
print(res.content)
